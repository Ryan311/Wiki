== Analyzing performance ==
=== time ===
*   $ time python yourprogram.py
=== execute within a timing context manager ===
{{{class = "brush: python"
#timer.py

import time
class Timer(object):
    def __init__(self, verbose=False):
        self.verbose = verbose

    def __enter__(self):
        self.start = time.time()
        return self

    def __exit__(self, *args):
        self.end = time.time()
        self.secs = self.end - self.start
        self.msecs = self.secs * 1000  # millisecs
        if self.verbose:
            print 'elapsed time: %f ms' % self.msecs

# example
from timer import Timer
from redis import Redis
rdb = Redis()

with Timer() as t:
    rdb.lpush("foo", "bar")
print "=> elasped lpush: %s s" % t.secs

with Timer as t:
    rdb.lpop("foo")
print "=> elasped lpop: %s s" % t.secs
}}}
=== line-by-line monitor ===
*   $ sudo pip install line_profiler
*   the executable script is "kernprof.py"
*   yourprogram.py must add decorator *@profile* for the func you want to measure the execute time
*   $ kernprof.py -l -v yourprogram.py
=== how much memory does it use ===
*   $ sudo pip install -U memory_profiler
*   $ sudo install psutil
*   add *@profile* to your func
*   $ python -m memory_profiler yourprogram.py
=== IPython shortcuts for line_profiler and memory_profiler ===
*   %load_ext memory_profiler
*   %load_ext line_profiler
*   %mprun -f yourprogram func()
*   %lprun -f yourprogram func()
=== memory leak ===
*   $ sudo pip install [[http://mg.pov.lt/objgraph/|objgraph]]
*   $ sudo pip install xdot

