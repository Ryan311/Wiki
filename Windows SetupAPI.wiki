%toc

msdn:   https://msdn.microsoft.com/en-us/library/windows/hardware/ff550855%28v=vs.85%29.aspx

Device Information Sets
https://msdn.microsoft.com/en-us/library/windows/hardware/ff541247%28v=vs.85%29.aspx

== 查找系统中BLE设备 ==
*   所有的LE设备在Properties里都有Friendly name属性， Hardware ID属性为BTHLE\DEV_{Address}
*   将有Friendly Name属性的设备对应地址返回
{{{
    BOOL CGuardKeyInportDemoDlg::GetBtDeviceInfo(GUID guid, map<CString, CString> &deviceMap)
    {
        HDEVINFO         deviceInfo = INVALID_HANDLE_VALUE;
        BOOL             status = TRUE;
        ULONG            deviceIndex;
        SP_DEVINFO_DATA  deviceInfoData;
        BOOL             bResult = FALSE;
        LPTSTR           buf = NULL;
        BOOL             done = FALSE;

        //
        // Examine all present devices to see if any match the given DriverName
        //
        deviceInfo = SetupDiGetClassDevs(&BT_CLASS,
            NULL,
            NULL,
            DIGCF_PRESENT);

        if (deviceInfo == INVALID_HANDLE_VALUE)
        {
            status = FALSE;
            goto Done;
        }

        deviceIndex = 0;
        deviceInfoData.cbSize = sizeof(deviceInfoData);

        while (done == FALSE)
        {
            //
            // Get devinst of the next device
            //

            status = SetupDiEnumDeviceInfo(deviceInfo,
                    deviceIndex,
                    &deviceInfoData);

            deviceIndex++;

            if (!status)
            {
                //
                // This could be an error, or indication that all devices have been
                // processed. Either way the desired device was not found.
                //
                done = TRUE;
                break;
            }

            //
            // Get the Hardware ID
            //
            bResult = GetDeviceProperty(deviceInfo,
                &deviceInfoData,
                SPDRP_HARDWAREID,
                &buf);

            if (bResult == TRUE && buf != NULL)
            {
                CString HardwareID = buf;
                //MessageBox(HardwareID);
                int pos = HardwareID.Find(L"BTHLE\\Dev");
                if (pos != -1)
                {
                    CString Adress = HardwareID.Right(pos + 12);
                    free(buf);
                    buf = NULL;
                    //
                    // Get the friendly name
                    //
                    bResult = GetDeviceProperty(deviceInfo,
                        &deviceInfoData,
                        SPDRP_FRIENDLYNAME,
                        &buf);

                    // If the DriverName value matches, return the DeviceInstance
                    //
                    if (bResult == TRUE && buf != NULL)
                    {
                        CString fname = buf;
                        //MessageBox(fname);
                        //break;
                        deviceMap[Adress] = fname;
                    }
                }
                //MessageBox(friendName);
            }

            if (buf != NULL)
            {
                free(buf);
                buf = NULL;
            }
        }
    Done:
        if (deviceInfo != INVALID_HANDLE_VALUE)
        {
            SetupDiDestroyDeviceInfoList(deviceInfo);
        }
        return status;
    }
}}}
获得设备的属性函数,  所有属性见： https://msdn.microsoft.com/en-us/library/ff551967%28v=vs.85%29.aspx
{{{
    BOOL CGuardKeyInportDemoDlg::GetDeviceProperty(
        _In_    HDEVINFO         DeviceInfoSet,
        _In_    PSP_DEVINFO_DATA DeviceInfoData,
        _In_    DWORD            Property,
        _Outptr_  LPTSTR        *ppBuffer
        )
    {
        BOOL bResult;
        DWORD requiredLength = 0;
        DWORD lastError;

        if (ppBuffer == NULL)
        {
            return FALSE;
        }

        *ppBuffer = NULL;

        bResult = SetupDiGetDeviceRegistryProperty(DeviceInfoSet,
            DeviceInfoData,
            Property,
            NULL,
            NULL,
            0,
            &requiredLength);
        lastError = GetLastError();

        if ((requiredLength == 0) || (bResult != FALSE && lastError != ERROR_INSUFFICIENT_BUFFER))
        {
            return FALSE;
        }

        *ppBuffer = (LPTSTR)malloc(requiredLength);

        if (*ppBuffer == NULL)
        {
            return FALSE;
        }

        bResult = SetupDiGetDeviceRegistryProperty(DeviceInfoSet,
            DeviceInfoData,
            Property,
            NULL,
            (PBYTE)*ppBuffer,
            requiredLength,
            &requiredLength);
        if (bResult == FALSE)
        {
            free(*ppBuffer);
            *ppBuffer = NULL;
            return FALSE;
        }

        return TRUE;
    }
}}}

*   根据Service UUID找出所有的Device Interface 
{{{ 
    int CGuardKeyInportDemoDlg::GetPairedDevList(GUID guid, set<CString> &devPath)
    {
        HRESULT hr = E_FAIL;
        HDEVINFO hDevInfo = SetupDiGetClassDevs(&guid, NULL, NULL, DIGCF_PRESENT | DIGCF_INTERFACEDEVICE);
        ULONG iDevIndex = 0;
        while (1) {
            SP_DEVICE_INTERFACE_DATA deviceInfoData;
            deviceInfoData.cbSize = sizeof(SP_DEVICE_INTERFACE_DATA);
            if (SetupDiEnumDeviceInterfaces(hDevInfo, 0, &guid, iDevIndex, &deviceInfoData))
            {
                DWORD cbRequired = 0;
                SetupDiGetDeviceInterfaceDetail(hDevInfo,
                    &deviceInfoData,
                    0,
                    0,
                    &cbRequired,
                    0);
                if (ERROR_INSUFFICIENT_BUFFER == GetLastError())
                {
                    PSP_DEVICE_INTERFACE_DETAIL_DATA pdidd = (PSP_DEVICE_INTERFACE_DETAIL_DATA)LocalAlloc(LPTR, cbRequired);

                    if (pdidd)
                    {
                        pdidd->cbSize = sizeof(*pdidd);
                        if (SetupDiGetDeviceInterfaceDetail(hDevInfo,
                            &deviceInfoData,
                            pdidd,
                            cbRequired,
                            &cbRequired,
                            0))
                        {
                            CString csDevicePath = pdidd->DevicePath;
                            devPath.insert(csDevicePath);
                        }
                        LocalFree(pdidd);
                    }
                }
            }
            else if (GetLastError() == ERROR_NO_MORE_ITEMS) //No more items
            {
                break;
            }
            iDevIndex++;
        }
        SetupDiDestroyDeviceInfoList(hDevInfo);
        return iDevIndex;
    }
}}}
*   根据以上两个集合， 找出Address::Name::DevicePath对应关系
{{{
    set<CString> pList;	// map< address, friendly name >
	map<CString, CString> maList;	// map< address, friendly name >
	map<CString, CString>::iterator mitr;
	set<CString>::iterator sitr;
	GetBtDeviceInfo(BT_CLASS, maList);
	GetPairedDevList(COM_SERVICE, pList);
	
	m_DevList.DeleteAllItems();
	for (sitr = pList.begin(); sitr != pList.end(); ++sitr)
	{
		CString Name;
		CString Address;
		CString Path;
		Path = *sitr;
		//MessageBox(Path);
		for (mitr = maList.begin(); mitr != maList.end(); ++mitr)
		{
			Address = mitr->first;
			Name = mitr->second;
			Address.MakeLower();
			Path.MakeLower();
			//MessageBox(Name);
			//MessageBox(Address);
			int pos = Path.Find(Address);
			if (pos != -1)
			{
				m_DevList.InsertItem(0, _T(""), 0);
				m_DevList.SetItemText(0, COL_NAME, mitr->second);
				m_DevList.SetItemText(0, COL_ADRESS, mitr->first);
				m_DevList.SetItemText(0, COL_PATH, *sitr);
			}
		}
	}
}}}

==  查找指定设备并打开 ==
*   SetupDiGetClassDevs
    *   Each device is associated with an SP_DEVINFO_DATA structure. 
    *   You can retrieve a handle (HDEVINFO) to a device information set that contains all installed devices in a particular class. 
    {{{
        The following are some examples of how to use the SetupDiGetClassDevs function.
        Example 1: Build a list of all devices in the system, including devices that are not currently present.
            Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES);

        Example 2: Build a list of all devices that are present in the system.
            Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES | DIGCF_PRESENT);

        Example 3: Build a list of all devices that are present in the system that are from the network adapter device setup class.
            Handle = SetupDiGetClassDevs(&GUID_DEVCLASS_NET, NULL, NULL, DIGCF_PRESENT);

        Example 4: Build a list of all devices that are present in the system that have enabled an interface from the storage volume device interface class.
            Handle = SetupDiGetClassDevs(&GUID_DEVINTERFACE_VOLUME, NULL, NULL, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
    }}}
*   SetupDiDestroyDeviceInfoList
    *   free all SP_DEVINFO_DATA structures in a device information set
*   SetupDiGetDeviceRegistryProperty
    *   查找设备属性值:   在Device Properties -> Details -> (Property, Value)
    *   见例子2
    {{{
        BOOL SetupDiGetDeviceRegistryProperty(
          _In_      HDEVINFO         DeviceInfoSet,
          _In_      PSP_DEVINFO_DATA DeviceInfoData,
          _In_      DWORD            Property,
          _Out_opt_ PDWORD           PropertyRegDataType,
          _Out_opt_ PBYTE            PropertyBuffer,
          _In_      DWORD            PropertyBufferSize,
          _Out_opt_ PDWORD           RequiredSize
        );
    }}}


== Example ==
=== Open device using device interface which is found by GUID ===  
*   Sample from MSDN:   Usbsamp Sample
    {{{
        //
        // guid是Device Interface Class， 每个LE设备配对后， LEEnum枚举一个PDO， 加载PDO后会为该设备提供一下Device Interface
        // Device Interface Name为   BTHLEDevice#{GUID}_BDADDR_#****** 
        //
        HANDLE OpenLeInterface(ULONGLONG ullBtAddr, GUID guid)
        {
            HANDLE hOut = INVALID_HANDLE_VALUE;
            HRESULT hr = E_FAIL;
            
            //
            // Create a device information set composed of all present devices associated with device interface GUID 
            //
            HDEVINFO hDevInfo = SetupDiGetClassDevs(&guid, NULL, NULL, DIGCF_PRESENT|DIGCF_INTERFACEDEVICE);
            ULONG iDevIndex = 0;
            while(1){
                SP_DEVICE_INTERFACE_DATA deviceInfoData;
                deviceInfoData.cbSize = sizeof (SP_DEVICE_INTERFACE_DATA);
                //  enumerate the device interfaces in a device information set
                if(SetupDiEnumDeviceInterfaces(hDevInfo, 0, &guid, iDevIndex, &deviceInfoData))
                {
                    DWORD cbRequired = 0;
                    //
                    // get required buffer size
                    //
                    SetupDiGetDeviceInterfaceDetail(hDevInfo,
                        &deviceInfoData,
                        0,
                        0,
                        &cbRequired,
                        0);
                    if (ERROR_INSUFFICIENT_BUFFER == GetLastError())
                    {
                        PSP_DEVICE_INTERFACE_DETAIL_DATA pdidd = (PSP_DEVICE_INTERFACE_DETAIL_DATA)LocalAlloc(LPTR, cbRequired);

                        if (pdidd)
                        {
                            pdidd->cbSize = sizeof(*pdidd);
                            //
                            // get the interface name
                            //
                            if (SetupDiGetDeviceInterfaceDetail(hDevInfo,
                                &deviceInfoData,
                                pdidd,
                                cbRequired,
                                &cbRequired,
                                0))
                            {
                                //CString csDev(_T("668E28F99733"));
                                //csDev.Format(_T("%I64x"), ullBtAddr);
                                CString csDevicePath = pdidd->DevicePath;
                                //csDev.MakeLower();
                                //csDevicePath.MakeLower();
                                //if (csDevicePath.Find(csDev) != -1)
                                {
                                    hOut= 
                                        CreateFile(pdidd->DevicePath,   //A NULL-terminated string that contains the device interface path
                                        GENERIC_READ | GENERIC_WRITE,
                                        FILE_SHARE_READ | FILE_SHARE_WRITE,
                                        NULL,
                                        OPEN_EXISTING,
                                        FILE_ATTRIBUTE_NORMAL,
                                        NULL);
                                    LocalFree(pdidd);
                                    break;
                                }
                                
                            }
                            LocalFree(pdidd);
                        }
                    }	 
                }
                else if(GetLastError() == ERROR_NO_MORE_ITEMS) //No more items
                {
                    break;
                }
                iDevIndex++;
            }
            SetupDiDestroyDeviceInfoList(hDevInfo);
            return hOut; 
        }
    }}}
=== Finds the Device instance of the DevNode with the matching DriverName. ===
*   Sample from MSDN:   USBView sample application
    {{{
        /*****************************************************************************

          DriverNameToDeviceInst()

          Finds the Device instance of the DevNode with the matching DriverName.
          Returns FALSE if the matching DevNode is not found and TRUE if found

        *****************************************************************************/
        BOOL 
        DriverNameToDeviceInst(
            _In_reads_bytes_(cbDriverName) PCHAR DriverName,
            _In_ size_t cbDriverName,
            _Out_ HDEVINFO *pDevInfo,
            _Out_writes_bytes_(sizeof(SP_DEVINFO_DATA)) PSP_DEVINFO_DATA pDevInfoData
            )
        {
            HDEVINFO         deviceInfo = INVALID_HANDLE_VALUE;
            BOOL             status = TRUE;
            ULONG            deviceIndex;
            SP_DEVINFO_DATA  deviceInfoData;
            BOOL             bResult = FALSE;
            PCHAR            pDriverName = NULL;
            PSTR             buf = NULL;
            BOOL             done = FALSE;

            if (pDevInfo == NULL)
            {
                return FALSE;
            }

            if (pDevInfoData == NULL)
            {
                return FALSE;
            }

            memset(pDevInfoData, 0, sizeof(SP_DEVINFO_DATA));

            *pDevInfo = INVALID_HANDLE_VALUE;

            // Use local string to guarantee zero termination
            pDriverName = (PCHAR) ALLOC((DWORD) cbDriverName + 1);
            if (NULL == pDriverName)
            {
                status = FALSE;
                goto Done;
            }
            StringCbCopyN(pDriverName, cbDriverName + 1, DriverName, cbDriverName);

            //
            // We cannot walk the device tree with CM_Get_Sibling etc. unless we assume
            // the device tree will stabilize. Any devnode removal (even outside of USB)
            // would force us to retry. Instead we use Setup API to snapshot all
            // devices.
            //

            // Examine all present devices to see if any match the given DriverName
            //
            deviceInfo = SetupDiGetClassDevs(NULL,
                    NULL,
                    NULL,
                    DIGCF_ALLCLASSES | DIGCF_PRESENT);

            if (deviceInfo == INVALID_HANDLE_VALUE)
            {
                status = FALSE;
                goto Done;
            }

            deviceIndex = 0;
            deviceInfoData.cbSize = sizeof(deviceInfoData);

            while (done == FALSE)
            {
                //
                // Get devinst of the next device
                //
                status = SetupDiEnumDeviceInfo(deviceInfo,
                                               deviceIndex,
                                               &deviceInfoData);
                deviceIndex++;
                if (!status)
                {
                    //
                    // This could be an error, or indication that all devices have been
                    // processed. Either way the desired device was not found.
                    //
                    done = TRUE;
                    break;
                }

                //
                // Get the DriverName value
                //
                bResult = GetDeviceProperty(deviceInfo,
                                            &deviceInfoData,
                                            SPDRP_DRIVER,
                                            &buf);
                
                // If the DriverName value matches, return the DeviceInstance
                //
                if (bResult == TRUE && buf != NULL && _stricmp(pDriverName, buf) == 0)
                {
                    done = TRUE;
                    *pDevInfo = deviceInfo;
                    CopyMemory(pDevInfoData, &deviceInfoData, sizeof(deviceInfoData));
                    FREE(buf);
                    break;
                }
                if(buf != NULL)
                {
                    FREE(buf);
                    buf = NULL;
                }
            }

        Done:
            if (bResult == FALSE)
            {
                if (deviceInfo != INVALID_HANDLE_VALUE)
                {
                    SetupDiDestroyDeviceInfoList(deviceInfo);
                }
            }
            if (pDriverName != NULL)
            {
                FREE(pDriverName);
            }
            return status;
        }
        


    _Success_(return == TRUE)
    BOOL
    GetDeviceProperty(
        _In_    HDEVINFO         DeviceInfoSet,
        _In_    PSP_DEVINFO_DATA DeviceInfoData,
        _In_    DWORD            Property,
        _Outptr_  LPTSTR        *ppBuffer
        )
    {
        BOOL bResult;
        DWORD requiredLength = 0;
        DWORD lastError;

        if (ppBuffer == NULL)
        {
            return FALSE;
        }

        *ppBuffer = NULL;

        bResult = SetupDiGetDeviceRegistryProperty(DeviceInfoSet,
                                                   DeviceInfoData,
                                                   Property ,
                                                   NULL,
                                                   NULL,
                                                   0,
                                                   &requiredLength);
        lastError = GetLastError();

        if ((requiredLength == 0) || (bResult != FALSE && lastError != ERROR_INSUFFICIENT_BUFFER))
        {
            return FALSE;
        }

        *ppBuffer = ALLOC(requiredLength);

        if (*ppBuffer == NULL)
        {
            return FALSE;
        }

        bResult = SetupDiGetDeviceRegistryProperty(DeviceInfoSet,
                                                    DeviceInfoData,
                                                    Property ,
                                                    NULL,
                                                    (PBYTE) *ppBuffer,
                                                    requiredLength,
                                                    &requiredLength);
        if(bResult == FALSE)
        {
            FREE(*ppBuffer);
            *ppBuffer = NULL;
            return FALSE;
        }

        return TRUE;
    }
    }}}
