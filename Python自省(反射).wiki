%toc

http://www.cnblogs.com/huxi/archive/2011/01/02/1924317.html


反射机制用于实现在运行时获取未知对象的信息.
应用例子：当我们需要实现一个通用的DBM框架时，可能需要对数据对象的字段赋值，但我们无法预知用到这个框架的数据对象都有些什么字段

== 内建方法检查或访问对象的属性 ==
*   dir([obj]):
    *   调用这个方法将返回包含obj大多数属性名的列表（会有一些特殊的属性不包含在内）。obj的默认值是当前的模块对象。
*   hasattr(obj, attr):
    *   这个方法用于检查obj是否有一个名为attr的值的属性，返回一个布尔值。
*   getattr(obj, attr):
    *   调用这个方法将返回obj中名为attr值的属性的值，例如如果attr为'bar'，则返回obj.bar。
*   setattr(obj, attr, val):
    *   调用这个方法将给obj的名为attr的值的属性赋值为val。例如如果attr为'bar'，则相当于obj.bar = val。
{{{class = "brush:python"
cat = Cat('kitty')
 
print cat.name # 访问实例属性
cat.sayHi() # 调用实例方法
 
print dir(cat) # 获取实例的属性名，以列表形式返回
if hasattr(cat, 'name'): # 检查实例是否有这个属性
    setattr(cat, 'name', 'tiger') # same as: a.name = 'tiger'
print getattr(cat, 'name') # same as: print a.name
 
getattr(cat, 'sayHi')() # same as: cat.sayHi()
}}}

== 访问对象的元数据 ==
特定对象的一些特殊属性
{{{
    在types模块中定义了全部的Python内置类型，结合内置方法isinstance()就可以确定对象的具体类型了。
        isinstance(object, classinfo):
    检查object是不是classinfo中列举出的类型，返回布尔值。classinfo可以是一个具体的类型，也可以是多个类型的元组或列表。
}}}
*   模块(module)
    *   __doc__: 文档字符串。如果模块没有文档，这个值是None。
    *   *__name__: 始终是定义时的模块名；即使你使用import .. as 为它取了别名，或是赋值给了另一个变量名。
    *   *__dict__: 包含了模块里可用的属性名-属性的字典；也就是可以使用模块名.属性名访问的对象。
    *   __file__: 包含了该模块的文件路径。需要注意的是内建的模块没有这个属性，访问它会抛出异常！
*   类(class)
    *   __doc__: 文档字符串。如果类没有文档，这个值是None。
    *   *__name__: 始终是定义时的类名。
    *   *__dict__: 包含了类里可用的属性名-属性的字典；也就是可以使用类名.属性名访问的对象。
    *   __module__: 包含该类的定义的模块名；需要注意，是字符串形式的模块名而不是模块对象。
    *   *__bases__: 直接父类对象的元组；但不包含继承树更上层的其他类，比如父类的父类
*    实例(instance)
    *   *__dict__: 包含了可用的属性名-属性字典。
    *   *__class__: 该实例的类对象。对于类Cat，cat.__class__ == Cat 为 True。
*   内建函数和方法(built-in functions and methods)
    *   __doc__: 函数或方法的文档。
    *   __name__: 函数或方法定义时的名字。
    *   __self__: 仅方法可用，如果是绑定的(bound)，则指向调用该方法的类（如果是类方法）或实例（如果是实例方法），否则为None。
    *   *__module__: 函数或方法所在的模块名。
*   函数(function)
    *   __doc__: 函数的文档；另外也可以用属性名func_doc。
    *   __name__: 函数定义时的函数名；另外也可以用属性名func_name。
    *   *__module__: 包含该函数定义的模块名；同样注意，是模块名而不是模块对象。
    *   *__dict__: 函数的可用属性；另外也可以用属性名func_dict。
    *   不要忘了函数也是对象，可以使用函数.属性名访问属性（赋值时如果属性不存在将新增一个），或使用内置函数has/get/setattr()访问。不过，在函数中保存属性的意义并不大。
    *   func_defaults: 这个属性保存了函数的参数默认值元组；因为默认值总是靠后的参数才有，所以不使用字典的形式也是可以与参数对应上的。
    *   func_code: 这个属性指向一个该函数对应的code对象，code对象中定义了其他的一些特殊属性，将在下文中另外介绍。
    *   func_globals: 这个属性指向定义函数时的全局命名空间。
    *   *func_closure: 这个属性仅当函数是一个闭包时有效，指向一个保存了所引用到的外部函数的变量cell的元组，如果该函数不是一个内部函数，则始终为None。
*   方法(method)
    *   __doc__: 与函数相同。
    *   __name__: 与函数相同。
    *   *__module__: 与函数相同。
    *   im_func: 使用这个属性可以拿到方法里实际的函数对象的引用。另外如果是2.6以上的版本，还可以使用属性名__func__。
    *   im_self: 如果是绑定的(bound)，则指向调用该方法的类（如果是类方法）或实例（如果是实例方法），否则为None。如果是2.6以上的版本，还可以使用属性名__self__。
    *   im_class: 实际调用该方法的类，或实际调用该方法的实例的类。注意不是方法的定义所在的类，如果有继承关系的话。
*   生成器(generator)
    *   _iter__: 仅仅是一个可迭代的标记。
    *   gi_code: 生成器对应的code对象。
    *   gi_frame: 生成器对应的frame对象。
    *   gi_running: 生成器函数是否在执行。生成器函数在yield以后、执行yield的下一行代码前处于frozen状态，此时这个属性的值为0。
    *   next|close|send|throw: 这是几个可调用的方法，并不包含元数据信息，如何使用可以查看生成器的相关文档。 
*   代码块(code)
    *   co_argcount: 普通参数的总数，不包括*参数和**参数。
    *   co_names: 所有的参数名（包括*参数和**参数）和局部变量名的元组。
    *   co_varnames: 所有的局部变量名的元组。
    *   co_filename: 源代码所在的文件名。
    *   co_flags:  这是一个数值，每一个二进制位都包含了特定信息。
*   栈帧(frame)
    *   f_back: 调用栈的前一帧。
    *   f_code: 栈帧对应的code对象。
    *   f_locals: 用在当前栈帧时与内建函数locals()相同，但你可以先获取其他帧然后使用这个属性获取那个帧的locals()。
    *   f_globals: 用在当前栈帧时与内建函数globals()相同，但你可以先获取其他帧……。
*   追踪(traceback)
    *   tb_next: 追踪的下一个追踪对象。
    *   tb_frame: 当前追踪对应的栈帧。
    *   tb_lineno: 当前追踪的行号。

== inspect模块 ==
inspect模块提供了一系列函数用于帮助使用自省。

*   检查对象类型
    *   is{module|class|function|method|builtin}(obj): 检查对象是否为模块、类、函数、方法、内建函数或方法。
    *   isroutine(obj): 用于检查对象是否为函数、方法、内建函数或方法等等可调用类型。用这个方法会比多个is*()更方便，不过它的实现仍然是用了多个is*()。 
*   获取对象信息
