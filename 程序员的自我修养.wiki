%toc

== 12 系统调用与API ==
*   系统调用是应用程序（运行库也是应用程序的一部分）与操作系统内核之间的接口， 它决定了应用程序是如何与内核打交道的。
*   Windows系统是完全基于DLL机制的， 它通过DLL对系统调用进行了包装， 形成了所谓的Windows API。 
*   Linux使用0x80号中断作为系统调用的入口
*   Windows使用0x2E号中断作为系统调用的入口

=== Linux系统调用 ===
*   x86下，系统调用由0x80中断完成
*   各个通用寄存器用于传递参数， EAX寄存器用于表示系统调用的接口号， EAX=1表示退出进程(exit), EAX=2表示创建进程(fork)...
*   每个系统调用都对应于内核源代码中的一个函数， 它们都以sys_开头， 如sys_exit
*   当系统调用返回时， EAX作为调用结果的返回值

=== 运行库 ===
*   运行时库将不同的操作系统的系统调用包装为统一固定的接口， 使得同样的代码， 在不同的都可以直接编译， 并产生一致的效果， 实现源代码级的可移植性
*   运行库是保证多个平台之间能够通用， 它是取各个平台之间功能的交集
*   Windows原生支持图形和用户交互系统， Linux不是原生支持， 所以运行库就不包含这个功能
