%toc

== const ==
#   If you want to make sure that ptr cannot point to any other memory location
    (i.e., cannot store a different address), you can write it one of two ways:
    {{{
        Type* const ptr = &vbl;
        Type* const ptr(&vbl);
        
        The pointer is a const , but the addressed object can be changed.
    }}}
#   If you want to make sure that the value of vbl cannot be changed by dereferencing ptr , you can write it in two ways:
    {{{
        const Type* ptr = &vbl;
        const Type* ptr(&vbl);
        
        In this case, the addressed object is a constant, but the pointer is not.
    }}}
#   If you want to impose both kinds of protection, you can write
    {{{
        const Type* const ptr = &vbl;
        const Type* const ptr(&vbl);
    }}}
#   Here is a good way to remember which is which: Read each of the following definitions from right to left (starting with the defined variable).
    {{{
        const char* x = &p;             /* x is a pointer to const char */
        char* const y = &q;             /* y is a const pointer to char */
        const char* const z = &r;       /* z is a const pointer to a const char */
    }}}

=== const Member Functions ===
*   C++
*   Placed after the parameter list, const becomes part of the function signature and guarantees that the function will not change the state of the host object.    const member function不能修改data member的值


=== const modify function parameter ===
*   const修饰函数参数是它最广泛的一种用途，它表示在函数体中不能修改参数的值(包括参数本身的值或者参数其中包含的值)：
    *   void function(const int Var);     //传递过来的参数在函数内不可以改变(无意义，该函数以传值的方式调用)
    *   void function(const char* Var);   //参数指针所指内容为常量不可变
    *   void function(char* const Var);   //参数指针本身为常量不可变(也无意义，var本身也是通过传值的形式赋值的)
    *   void function(const Class& Var); //引用参数在函数内不可以改变
*   参数const通常用于参数为指针或引用的情况，若输入参数采用“值传递”方式，由于函数将自动产生临时变量用于复制该参数，该参数本就不需要保护，所以不用const修饰。

=== const修饰成员函数的返回值 ===
1、一般情况下，函数的返回值为某个对象时，如果将其声明为const时，多用于操作符的重载。通常，不建议用const修饰函数的返回值类型为某个对象或对某个对象引用的情况。原因如下：如果返回const对象，或返回const对象的引用，则返回值具有const属性，返回实例只能访问类A中的公有（保护）数据成员和const成员函数，并且不允许对其进行赋值操作，这在一般情况下很少用到。
2、如果给采用“指针传递”方式的函数返回值加const修饰，那么函数返回值（即指针所指的内容）不能被修改，该返回值只能被赋给加const 修饰的同类型指针。
3、函数返回值采用“引用传递”的场合不多，这种方式一般只出现在类的赙值函数中，目的是为了实现链式表达。
   

== volatile ==
*   It can be used in the same places that const can be used. volatile can be thought of as almost the opposite of const : 
*   It marks something that can be modified at any time, perhaps by another program or another thread. 
*   It is a hint to the compiler that there should be no optimization during access to it.
*   It can be used for variables, but more commonly, it is used for pointers. Like const , it can be applied to the pointer or the addressed memory. 
    {{{
        To declare a regular pointer to volatile memory, use this form:
            volatile char* vcharptr;
        To declare a volatile pointer to regular memory, use this form:
            char* volatile vptrchar;
    }}}
    
*   volatile的本意是“易变的”
    *   volatile关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如操作系统、硬件或者其它线程等。
    *   遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。 
    *   当要求使用volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被寄存。 

== mutable ==
*   mutalbe的中文意思是“可变的，易变的”，跟constant（既C++中的const）是反义词。
*   在C++中，mutable也是为了突破const的限制而设置的。被mutable修饰的变量(mutable只能由于修饰类的非静态数据成员)，将永远处于可变的状态，即使在一个const函数中。 
    {{{
        class ClxTest
        {
        public:
        　　ClxTest();
        　　~ClxTest();
        　　void Output() const;
        private:
        　　mutable int m_iTimes;
        };

        ClxTest::ClxTest()
        {
            m_iTimes = 0;
        }

        ClxTest::~ClxTest()
        {}

        void ClxTest::Output() const
        {
            cout << "Output for test!" << endl;
            m_iTimes++;
        } 
    }}}

