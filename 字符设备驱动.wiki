%toc

= 主设备号和次设备号 =
*   由ls -l显示出的位于/dev目录下的特殊文件(或称为设备文件)
    *   第一列为'c',  字符设备驱动
    *   第一列为'b',  块设备驱动 
*   主设备号标识设备对应的驱动程序， 如/dev/null和/dev/zero由设备驱动程序1管理
*   次设备号由内核使用， 用于正确确定设备文件所指的设备。 可以通过次设备号获得一个指向内核设备的直接指针
*   内核中, dev_t类型(<linux/types.h>)用来保存设备编号----包括主设备号和次设备号
*   动态分配主设备号的情况下， 无法预先创建设备节点， 可以用脚本安装， 先加载设备， 再从/proc/devices中读模块的主设备号， 再创建相应的设备节点

= 重要数据结构 =
*   <linux/fs.h>    struct file_operations， fops(指向该结构的指针)
    *   该结构包含一组函数指针， 每个打开的文件和一组函数关联,  这些操作用来实现系统调用
    *   这个结构的每一个字段都必须指向驱动程序中实现特定操作的函数， 对于不支持的操作， 对应字段可设为NULL
    *   该结构的第一个字段并不是一个操作， 而是指向“拥有”该结构的模块的指针
    {{{
        struct file_operations scull_fops = {
            .owner = THIS_MODULE,
            .llseek = scull_llseek,
            .read = scull_read,
            .write = scull_write,
            .ioctl = scull_ioctl,
            .open = scull_open,
            .release = scull_release,t
    *b
    }}}
    
*   <linux/fs.h>    struct file     filp(指向该结构的指针)
    *   与用户空间程序的FILE没有任何关联， 是一个内核结构， 不会出现在用户空间
    *   该结构代表一个打开的文件， 由内核在open时创建， 并传递给在该文件上进行操作的所有函数， 直到最后的close函数
    *   重要成员:   mode_t f_mode; struct file_operations *f_op;(与文件相关操作, 可重载)
    
*   <linux/fs.h>    struct inode
    *   内核用inode结构在内部表示文件， 与file不同。 它们的关系类似进程和程序的关系。
    *   该结构中包含大量与文件相关的信息
        *   dev_t i_rdev        表示设备文件的inode结构
        *   struct cdev *i_cdev     表示字符设备的内核的内部结构， 当inode指向一个字符设备文件时， 该字段包含了指向struct cdev结构的指针

*   <linux/cdev.h>  struct cdev
    *   内核内部使用该结构表示字符设备
    *   字符设备注册的相关操作函数
        *   cdev_alloc()        分配该结构
        *   cdev_init()         初始化已分配的结构
        *   cdev_add()          告诉内核该结构的信息            相当于DeviceAdd(), 而module_init()中的函数相当于DriverEntry()
        *   cdev_del()          从系统中移除一个字符设备


== container_of ==
*   container_of(pointer, container_type, container_field)
*   该宏需要一个container_field字段的指针， 该字段包含在container_type类型的结构中， 然后返回包含该字段的结构指针
{{{
    struct scull_dev {
        struct scull_qset *data;
        int quantum;
        int qset;
        unsigned int access_key;
        struct semaphore sem;
        struct cdev cdev;
    }
    struct scull_dev *dev;  //device information

    dev =  container_of(inode->i_cdev, struct scull_dev, cdev);
    filp->private_data = dev; // for other methods
}}}

*container_of的实现*
{{{
    
    #define offsetof(TYPE, MEMBER) ((size_t) & ((TYPE *)0)->MEMBER)
    
    /** 
    * container_of - cast a member of a structure out to the containing structure 
    * @ptr:        the pointer to the member. 
    * @type:       the type of the container struct this is embedded in. 
    * @member:     the name of the member within the struct. 
    * */ 
    #define container_of(ptr, type, member) ({                      \ 
        const typeof(((type *)0)->member) *__mptr = (ptr);    \ 
        (type *)((char *)__mptr - offsetof(type,member));})
}}}
