%toc
= Python Build-in Library =
==  Build-in Types ==
*   The principal built-in types are __numerics, sequences, mappings, files, classes, instances and exceptions__
*   
== Build-in functions ==
*   str() repr() `` eval()   
*   isinstance()    -> isinstance(anobj, basestring) 
*   range, xrange   -> range产生一个list， xrange产生一个xrange object， 功能相同，
    *   但如果数据很大， xrange效率会更高， 因为他不会维护一个大的列表， 测试：
    *   %timeit random.shuffle(range(10000), 10)
    *   %timeit random.shuffle(xrange(1000), 10)
*   zip 返回一个元组的列表， 每个元组都是列表的第i个元素的， 元组个数为列表最小的那个参数
    *   zip(*[]) == unzip   相当于将每个元素拆分， 然后再合并
    *   x = [1,2,3]; b = [2,3,4]; zipped = zip(x, y) : [(1,2), (2,3), (3,4)]
    *   lst = [[1,2,3], [2,3,4]]; zipped = zip(*lst) : [(1,2), (2,3), (3,4)]
== os ==
*   This module provides a portable way of using operating system dependent functionality.
*   提供与系统相关的功能， 在各平台通用可移植的能力
*   os.name -> 平台名字
*   os.chdir, os.getcwd()   -> 路径操作
*   If you just want to read or write a file see open(), if you want to manipulate paths, 
*       see the os.path module, and if you want to read all the lines in all the files on the 
*       command line see the fileinput module. For creating temporary files and directories see
*       the tempfile module, and for high-level file and directory handling see the shutil module.
== sys ==
*   This module provides access to some variables used or maintained by the interpreter and 
*   to functions that interact strongly with the interpreter. It is always available.
*   该模块提供访问解释器中使用的参数与函数的功能
*   sys.argv    -> 表示一个列表， 包含命令行参数， argv[0]是脚本名称
*   sys.exit    -> 退出Python
*   sys.getwindowsversion()     -> 获得当前Windows Version
== csv ==
*   Commo Separated Values: The csv module implements classes to read and write tabular data in CSV format
*   csv.reader  读入分隔符文件
*   csv.writer  输出分隔符文件
== sets ==
== mashal ==
== pickle,cpickle ==
== json ==
*   JavaScipt Object Notation   HTTP请求在Web浏览器和其他应用程序之间发送数据的标准格式之一
*   json.loads  将JSON字符串转换成Python形式
*   json.dumps  将Python对象转换成JSON格式
== string ==
*   translate
    *   table = string.maketrans(from, to)
    *   string.translate(table, delete)
    *   allchar = string.maketrans('','')
*   case
    *   string.upper()
    *   string.lower()
    *   string.capitalize()
    *   string.title()
*   fill zero
    *   string.zfill(width)
    *   '12'.zfill(5)  -> '00012'
== struct ==
== random ==
*   random.getstate   random.setstate   -> 可以保存产生随机数的状态， 产生相同的随机数
*   random.seed([x])    -> 初始化随机序列产生器
*   random.randrange(start, stop, step) -> equivalent to random.choice(range(start, stop, step)), 但效率更高
*   random.randint(a,b) -> 产生一个在a, b之间的随机整数
*   random.suffle(x)    -> 对序列对象x重新排列， 类似洗牌
*   random.sample(x, k)    -> 在序列对象x中取出k个样本
*   random.random()     -> 返回下一个随机数[0,1)之间
*   random.uniform(a,b) -> 返回下一个在[a,b]之间的随机数

= Internet Programming =

= Web Programming =
针对Web应用程序的开发， 包括Web客户端和服务器
<br>Web客户端和服务器交互的语言是标准协议HTTP， HTTP是TCP/IP的上层协议。
<br>它的职责是通过发送、接收HTTP消息来处理客户端的请求， 它属于无状态协议， 它不跟踪从一个客户端到另一个客户端的请求信息
<br>使用cookie保存客户端的客户状态信息
== urlparse ==
用来操作URL字符串
*   urlparse.urlparse(url)  分拆
*   urlparse.urlunparse()   合并
*   urlparse.urljoin()      拼接
== urllib ==
提供在给定的URL地址下载数据的功能
== urllib2 ==
处理更复杂的URL打开总量
== requests ==
== xml ==
*   Python’s interfaces for processing XML are grouped in the xml package.
*   xml.etree.ElementTree: the ElementTree API, a simple and lightweight XML processor
*   xml.dom: the DOM API definition
== lxml ==
*   用来读写HTML和XML格式数据的库, 基于xml.etree.ElementTree
*   lxml.html   处理HTML
*   lxml.objectify  处理XML

= Data Base =
== sqlite3 ==
*   SQLite是一款嵌入式的数据库
== pymongo ==
*  NoSQL数据库 



= Third Party =
== hachoir ==
*   https://bitbucket.org/haypo/hachoir/wiki/Home
    *   能够解析Mp3、jpeg等等文件的MetaData并打印出来， 对二进制文件的字节处理
*   Install
    {{{
        sudo apt-get install    python-hachoir-core python-hachoir-metadata python-hachoir-parser 
                                python-hachoir-urwid python-hachoir-subfile python-hachoir-regex 
                                python-hachoir-wx 
    }}}
*   Example
    *   https://bitbucket.org/haypo/hachoir/wiki/hachoir-metadata/code
    *   http://www.thehackeruniversity.com/2014/02/02/python-hachoir-tutorial
== Scrapy ==
*   http://scrapy.org/
*   An open source and collaborative framework for extracting the data you need from websites. In a fast, simple, yet extensible way.
