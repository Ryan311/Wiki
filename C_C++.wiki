%toc

== Basic ==
*   C99标准定义的确定空间大小的类型: uint8_t, uint32_t
*   [[Calling Convention]]
*   [[字符_字符串]]
*   [[c运行库_C标准库_windowsAPI]]
*   [[C++ STL]]
*   [[Visual C++中C_C++格式化输出]]
*   [[const]]
*   [[sscanf函数和正则表达式]]
*   [[C++多态]]
*   类的访问权限
*   [[编译预处理]]
*   [[C++Standard]]
*   [[Little and Big Endian]]


==  GNU C  ==
*   Extensions to the C Language Family   http://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html
*   GNU C provides several language features not found in ISO standard C 
*   Linux内核使用的GNU C扩展:
    *   语句表达式 
    *   typeof
    *   零长度数组
    *   可变参数宏
    *   标号元素
    *   Case 范围
    *   声明的特殊属性
    *   当前函数名
    *   内建函数

在Linux平台上最广泛使用的C函数库是glibc，其中包括C标准库的实现。几乎所有C程序都要调用glibc的库函数，所以glibc是Linux平台C程序运行的基础。
<br>glibc提供一组头文件和一组库文件，最基本、最常用的C标准库函数和系统函数在libc.so库文件中，几乎所有C程序的运行都依赖于libc.so，有些做
<br>数学计算的C程序依赖于libm.so，以后我们还会看到多线程的C程序依赖于libpthread.so。以后说libc时专指libc.so这个库文件，而说glibc时指的
<br>是glibc提供的所有库文件。

==  Bugs ==
*   单目运算符的优先级很高， 且结合方向是自右向左， 
    {{{
        char p[10] = "1234567890";
        int *a = (int *)p++;
        int *b = (int *)p++;
        
        执行完后， p是指向p[3]的，因为p++先执行， 然后才会强制转换
        要实现p向后移4 byte， 需要先将p强制转换成int *的
        ((int *)p)++;           这个是语法错误
        int *p1 = (int *)p;     这样OK
    }}}
