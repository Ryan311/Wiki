%toc

= [[http://blogs.msdn.com/b/iliast/archive/2007/10/06/driver-driver-and-driver-application-communication.aspx|Driver-Driver and Driver-Application Communication]] =

= [[http://msdn.microsoft.com/en-us/library/windows/hardware/ff544200%28v=vs.85%29.aspx|Driver Support Routines]] =
*   Run-time routines
    *   是MSFT提供的通用处理函数供内核Driver调用， 与user mode的ANSI-C库函数相对应
    *   The so-called run-time library component (prefix Rtl) contains utility routines,  such as list and 
    *   string-management routines, that kernel-mode drivers can use instead of regular ANSI-standard library routine

== Unicode String in Driver ==
*   structure
{{{  
    typedef struct _UNICODE_STRING {
      USHORT Length;
      USHORT MaximumLength;
      PWSTR  Buffer;
    } UNICODE_STRING, *PUNICODE_STRING;
}}}
*   DECLARE_CONST_UNICODE_STRING        macro, 定义并初始化一个unicode string
*   RtlAnsiCharToUnicodeChar
*   RtlAnsiStringToUnicodeSize
*   RtlAnsiStringToUnicodeString
*   RtlAppendUnicodeStringToString
*   RtlCompareUnicodeString
*   RtlCopyUnicodeString
*   RtlInitEmptyUnicodeString
*   RtlInt64ToUnicodeString
*   RtlIntegerToUnicodeString
*   RtlIntPtrToUnicodeString
*   RtlUpcaseUnicodeChar
*   RtlUpcaseUnicodeString

= Windows API =
*   [[http://www.cppblog.com/sunshinealike/archive/2009/03/10/76050.html|Windows 应用程序基本结构]]
    *   WinMian 函数由三个基本组成部分：函数说明、初始化和消息循环。该函数的功能:
        *   注册窗口类，建立窗口及执行其他必要的初始化工作
        *   进入消息循环，根据从应用程序消息队列接受的消息调用相应的处理过程。
        *   当消息循环检测到 WM_QUIT 消息时终止程序运行。
    *   消息循环
        *   Windows 应用程序的运行以消息为核心。 Windows 将产生的消息放入应用程序的消息队列中，
        *   而应用程序的 WinMain 函数在消息循环中提取队列中的消息，并将其传递给窗口函数的相应过程处理。 
    *   窗口函数
        *   窗口函数的主体是消息处理语句，由一系列 case 语句组成。程序员只需要根据窗口可能收到的消息在 case 语句中编写相应的处理程序段即可。
    *   [[Win32Project]]
*   [[http://www.cppblog.com/sunshinealike/archive/2009/03/10/76148.html|图形设备接口及windows绘图]]
*   [[http://www.cppblog.com/sunshinealike/archive/2009/03/11/76242.html|字体设置与输出]]
*   [[http://www.cppblog.com/sunshinealike/archive/2009/03/12/76346.html|对键盘和鼠标的响应]]
*   [[http://www.cppblog.com/sunshinealike/archive/2009/03/14/76539.html|资源在Windows编程中的应用]]

= Windows Service =
*   [[http://msdn.microsoft.com/en-us/library/ms685141%28v=vs.85%29.aspx|What is an service application]]
{{{ A service application conforms to the interface rules of the Service Control Manager (SCM). 
    It can be started automatically at system boot, by a user through the Services control panel applet, 
    or by an application that uses the service functions. Services can execute even when no user is logged on to the system.
    A driver service conforms to the device driver protocols. It is similar to a service application, but it does not interact with the SCM.
}}}
*   [[http://www.codeproject.com/Articles/499465/Simple-Windows-Service-in-Cplusplus|Simple Windows Service in C++]]
*   Windows Samples:    [[https://code.msdn.microsoft.com/CppInteractiveWindowsServic-c241d080|Interactive Windows Service in C++]] && [[https://code.msdn.microsoft.com/CppWindowsService-cacf4948|A basic Windows service in C++]]

== [[http://msdn.microsoft.com/en-us/library/windows/desktop/ms632590%28v=vs.85%29.aspx|Messages and Message Queues]] ==
*   Windows-based applications are event-driven, The system passes all input for an application to the various windows in the application. 
*   Each window has a function, called a window procedure, that the system calls whenever it has input for the window. The window procedure processes the input and returns control to the system

== [[http://msdn.microsoft.com/en-us/library/windows/desktop/aa363224%28v=vs.85%29.aspx|Device Management]] ==
*   Note
{{{
    Device management provides a way to uniformly notify all applications and system features of changes 
    that may affect their operation or access to resources. Applications and the system use and process 
    device events to take advantage of new resources when they become available and to prevent loss of data
    when existing resources become unavailable.
}}}
*   The system uses messages to notify applications of device changes and power changes
    *   Device messages notify applications of device change events
    *   power messages notify applications of power management events
    *   Applications and drivers can also define and use custom messages to enable notification of other types of events
*   Example:   create a win32 project + [[http://msdn.microsoft.com/en-us/library/windows/desktop/aa363432%28v=vs.85%29.aspx|Registering for Device Notification]]
    *   This example create a GUI and receive windows messages about device changes
    *   Device Notification 需要通过函数RegisterDeviceNotification注册设备的GUID才能收到通知!!!
*   [[http://msdn.microsoft.com/en-us/library/windows/desktop/aa362912%28v=vs.85%29.aspx|Bluetooth and WM_DEVICECHANGE Messages]]
    *   GUID_BLUETOOTH_HCI_EVENT    ACL建立或断开时收到消息
    *   GUID_BLUETOOTH_L2CAP_EVENT  L2cap Channel建立或断开时收到消息
    *   GUID_BLUETOOTH_RADIO_IN_RANGE   与远端设备配对或删除配对信息时收到消息， BTServer中使用
    *   GUID_BLUETOOTH_RADIO_OUT_OF_RANGE   Inquiry相关通知
{{{
    // 注册本地BT信息， 如果变化会收到通知
    BOOL RegisterLocalBtDevChange()
    {	
        BOOL bRet = FALSE;

        DEV_BROADCAST_DEVICEINTERFACE NotificationFilter;
        ZeroMemory( &NotificationFilter, sizeof(NotificationFilter) );
        NotificationFilter.dbcc_size = sizeof(DEV_BROADCAST_DEVICEINTERFACE);
        NotificationFilter.dbcc_devicetype = DBT_DEVTYP_DEVICEINTERFACE;
        NotificationFilter.dbcc_classguid = GUID_BTHPORT_DEVICE_INTERFACE;

        g_hLocalBtDevNotify = RegisterDeviceNotification(gLeHidServiceStatusHandle, &NotificationFilter, DEVICE_NOTIFY_SERVICE_HANDLE);

        if( !g_hLocalBtDevNotify ) 
        {
            RT_DEBUG(TRACE_LEVEL_ERROR, TRACE_FLAG_RTKBLESERV, (_T("LE: RegisterDeviceNotification fail(%d)"), GetLastError()));
        }
        return TRUE;
    }

    // 注册远端配对设备的信息通知
    BOOL RegisterRemoteBtDviceNotify()
    {
        HANDLE hBtDeviceHandle = NULL;
        TCHAR lpstrFilePath[MAX_PATH + 1] = {0};
        if(!GetDevicePath((LPGUID)&GUID_BTHPORT_DEVICE_INTERFACE, lpstrFilePath))
        {
            RT_DEBUG(TRACE_LEVEL_ERROR, TRACE_FLAG_RTKBLESERV, (_T("LE: GetDevicePath fail(%d)"), GetLastError()));
            return FALSE;
        };
        hBtDeviceHandle = CreateFile(
            lpstrFilePath,  // drive 
            GENERIC_READ|GENERIC_WRITE,
            FILE_SHARE_READ | FILE_SHARE_WRITE,
            NULL,
            OPEN_EXISTING,
            FILE_FLAG_OVERLAPPED,
            NULL);
        if (INVALID_HANDLE_VALUE == hBtDeviceHandle)
        {
            RT_DEBUG(TRACE_LEVEL_ERROR, TRACE_FLAG_RTKBLESERV, (_T("LE: CreateFile fail(%d)"), GetLastError()));
            return FALSE;
        }
        DEV_BROADCAST_HANDLE dbhZ;
        ZeroMemory(&dbhZ, sizeof(dbhZ));
        dbhZ.dbch_size = sizeof dbhZ;  
        dbhZ.dbch_devicetype = DBT_DEVTYP_HANDLE;  
        dbhZ.dbch_reserved = 0;  
        dbhZ.dbch_handle = hBtDeviceHandle;  
        dbhZ.dbch_hdevnotify = NULL;
        memcpy(&dbhZ.dbch_eventguid, &GUID_BLUETOOTH_RADIO_IN_RANGE,  sizeof dbhZ.dbch_eventguid);  
        dbhZ.dbch_nameoffset = 0;  
        dbhZ.dbch_data[0] = 0;  

        g_hRemoteDeviceNotify = RegisterDeviceNotification(gLeHidServiceStatusHandle, &dbhZ, DEVICE_NOTIFY_SERVICE_HANDLE);
        if (!g_hRemoteDeviceNotify)
        {
            RT_DEBUG(TRACE_LEVEL_ERROR, TRACE_FLAG_RTKBLESERV, (_T("LE: CreateFile fail(%d)"), GetLastError()));
            CloseHandle(hBtDeviceHandle);
            return FALSE;
        }
        CloseHandle(hBtDeviceHandle);
        return TRUE;
    }
}}}
