%toc

== [[Linux Log]] ==
== [[Linux Executive]] ==
== [[Linux IPC]] ==


= 重要头文件 =
| #include <linux/init.h>        | 包含模块初始化及清除函数的宏          | module_init(init_function), module_exit(cleanup_function)                   |
| #include <linux/sched.h>       | 包含驱动程序使用的大部分内核API的定义 | Sleep()及各种变量声明                                                       |
| #include <linux/module.h>      | 必需的头文件，必须包含在模块源代码中  |                                                                             |
| #include <linux/version.h>     | 包含所构造内核版本信息的头文件        | LINUX_VERSION_CODE                                                          |
| #include <linux/moduleparam.h> | 用来创建模块参数的宏所需头文件        | module_param(variable, type, perm);                                         |
| #include <linux/kernel.h>      | 包含打印函数的头文件                  | printk(), container_of宏                                                    |
| #include <linux/types.h>       | 包含一些变量声明                      | dev_t 设备号类型                                                            |
| #include <linux/kdev_t.h>      | 设备号相关宏操作                      | MAJOR(dev_t dev), MINOR(dev_t dev), MKDEV(int major, int minor)             |
| #include <linux/fs.h>          | 文件系统相关操作                      | register_chrdev_region(), alloc_chrdev_region(), unregister_chrdev_region() |
| #include <linux/slab.h>        | 内存管理相关操作                      | kmalloc, kfree                                                              |
| #include <linux/cdev.h>        | 字符设备结构定义及函数操作            | struct cdev, cdev_init, cdev_add, cdev_alloc, cdev_del                      |
| #include <asm/uaccess.h>       | 声明在kernel和user mode移动数据函数   | copy_from_user, copy_to_user                                                |
| #include <linux/proc_fs.h>     | 所有使用/proc的模块必须包含           | 其中的函数用于创建只读的/proc文件等                                         |
| #include <asm/semaphore.h>     | Linux信号量                           | struct semaphore;  sema_init();  DECLARE_MUTEX(name); down*(); up();        |
| #include <linux/rwsem.h>       | 读入者/写入者信号量, rwsem            | struct rw_semaphore;  init_rwsem; down*; up*; downgrade_write();            |
| #include <linux/completion.h>  | 完成接口, completion                  | 一种轻量级的机制， 允许一个线程告诉另一个线程某个工作已经完成               |
| #include <linux/spinlock.h>    | 自旋锁， spinlock                     | spinlock_t; spin_lock_init(); spin_lock*(); spin_unlock*();                 |
| #include <linux/spinlock.h>    | 读入者/写入者自旋锁                   | rwlock_t; rwlock_init(); read_lock*(); read_unlock*(); write_lock*()        |
|                                |                                       |                                                                             |


= 重要函数及宏 =
| container_of            | <linux/kernel.h> | 宏， 由结构中成员的指针获得结构的指针 |
| mutex_lock_interuptible |                  |                                       |
| mutex_unlock            |                  |                                       |

