%toc

作者： Robin Heydon

= 低功耗蓝牙 =
== 低功耗体现在哪些方面 ==
1. 在低功耗蓝牙中， 一个设备如果想被发现就必须每隔几秒发送三次短消息； 而如果它想发现打算与之通信的设备， 在广播短消息之后该设备应该立即进行侦听
在寻找其它设备时， 设备将打开它的接收器并侦听其他设备的传输。 三次传输分别利用了三个不同的频率进行， 以提高鲁棒性， 选择三是在鲁棒性和低功耗之间来平衡。

2. 选择哪些设备执行发送、哪些设备执行接收时也要做考虑。 要搜寻一个正在发送的设备可能需要花费很长的一段时间， 并因此耗费大量能量， 因此这类操作当交
给那些能量储备更多的设备。在低功耗蓝牙中， 可发现设备执行数据的发送， 而寻找其它设备的设备执行接收。 这正好是和经典蓝牙相反的!!!

3. 使用短报文, 原因有三。 1) 通过使用高效率编码， 短分组可以使用更少的能量和更快的发送相同数据的数据。2) 限制设备只可使用短报文， 控制器消除了在一次
数据传输中需要不断校准无线电的需求。3) 短期、间歇性而非长期、取电令设备可以从一个纽扣电池获得更多的能量。

4. 内存需求小， 价格和能耗少(ram需要持续供电)。 在链路层保持较短分组有助于减少无线电发送和接收数据包时对内存的需求； 属性协议层不需要处理任何长度大于23字节的数据报文， 在状态转换时不
要求存储任何状态信息。 低功耗蓝牙只有一个协议--属性协议来支持名称发现、服务发现、读取和写入信息， 以实现不同的用例， 比传统蓝牙使用多个协议开销少很多。

5. 所有层都采用非对称设计， 让能源更少的设备负担更少的事情。
1)  物理层：有两类无线电， 接收器和发射器。 一个设备可以两个都有， 或只有一个。 假设一个设备有接收器， 另一个有发射器， 二者构成的网络称为非对称网络
2)  链路层：设备被分为advertiser、scanner、master、slave。 advertiser和scanner显然是非对称的。 master和slave是两个设备连接后的角色， 从设备无法发起任何
复杂的操作， 而主设备则必须负责微微网的定时， 自适应跳频集合设置、加密以及一些其他的复杂操作。从设备只要完成要求的操作， 可以非常简单， 实现了低成本、低内存和低功耗。
3)  属性协议层： 存在两类设备， 称为客户端和服务器。 服务器保存数据， 客户端向其发送请求以获得数据。 客户端的工具比较辛苦， 能耗更高
4)  安全架构：非对称密码分配方案， 由从设备提供密钥， 将其交给主设备并由后者保存。主设备因而担负起保存链路绑定信息的重任， 从设备则无需记忆相关信息。

== 凡事皆有状态 ==
*   低功耗蓝牙背后有个基本的概念：任何事物都有状态， 状态可以是任何东西：当前的温度、设备里电池的状态，设备名称或是对测量温度的地点的描述。它通过属性服务器上的属性协议对外公开。
*   状态： “可读”， “可写”， “可通知”

=== [[综述]] ===
== [[控制器]](Controller) ==
== [[主机_控制器接口]](HCI) ==
== [[主机]](Host) ==
== [[应用]](App) ==

