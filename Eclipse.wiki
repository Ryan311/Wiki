%toc

== Eclipse ==
*   Plugins
    *   CDT for C/C++ project
    *   Pydev for python project
        *   Project Address:     http://sourceforge.net/projects/pydev/files/
            *   下载最新版本的PyDev， 解压将Copy到Eclipse目录
        *   Install Location from Eclipse:    http://pydev.org/updates
        *   PyQt5加入到Build_in模块中， 这样在使用时不会显示错误
            *   在PyDev->Python Interpreter->Libraries中加入PyQt5库， /usr/lib/python3/dist-packages/PyQt5
            *   在PyDev->Python Interpreter->Force Buildins, News:  Add [PyQt5.Qt, PyQt5.QtGui ......], 
            *   上面的列表内容：  python ->  import PyQt5  ->  help(PyQt5)  : PACKAGE CONTENTS
    *   Erlide for Erlang project
    *   vrapper for Vimer in eclipse
*   Show eclipse icon in the Unity launcher
    <br>*sudo cp ~/Persnail_WorkSpace/eclipse/icon.xpm /usr/share/pixmaps/eclispe.xpm*

==  Eclipse + Cygwin for C/C++ ==
http://www.cnblogs.com/zhxxcq/archive/2013/04/21/3033389.html
==  Eclipse + MinGW ==
*  安装Eclipse的CDT
*  安装MinGW
*  将MinGW\bin下的“mingw32-make.exe”改为“make.exe”
*  系统环境变量PATH增加“C:\MinGW\bin”（假如安装目录为C:\MinGW）
    *  C_INCLUDEDE_PATH，CPLUS_INCLUDE_PATH——C:\MinGW\include；LIBRARY_PATH——C:\MinGW\lib
*  Vim Support
    *  Help -> Install new Software： http://vrapper.sourceforge.net/update-site/stable
*  Color Theme
    *  Help -> Install new Software:  http://eclipse-color-theme.github.com/update
    *  Window→Preferences→General→Appereance→Color Theme ，在里面就可以选择喜欢的主题

==  Eclipse CDT 对 Doxygen 型注释的支持 ==
1、工作空间默认
 
Windows -> Preferrences -> C/C++ -> Editor -> Documentation tool comments
 
默认为none，修改为Doxygen即可
 
2、工程特别属性
如果不想设置为整个工作空间的默认属性，可以在工作属性对话框的这里找到：
 
Project -> Properties -> C/C++ General -> Enable project specific settings
 
选择Doxygen即可

==  Doxygen文档工具在Eclipse中的集成    Eclox ==
http://blog.csdn.net/zhhymh/article/details/6256966
http://www.cnblogs.com/lanxuezaipiao/p/3551609.html

==  Good Examples  ==
*   http://fnch.users.sourceforge.net/doxygen_c.html

==  Folding ==
*   Windows -> Preferences -> c/c++ -> Editor -> Folding 
*   Select the items
*   Windows -> Preferences -> General -> Keys:  fold
*       Toggle Folding -> Binding -> Type a binding key such as "Ctrl + F"

==  高亮显示选中变量  ==
windows-> preferences-> c/c++ -> Editor-> Mark Occurences 
最上边的大标题的复选框勾上，下面的就都可以高亮显示了，Local variables是变量的高亮显示

==  修改变量， 方法等字体颜色  ==
windows-> preferences-> c/c++ -> Editor-> Syntax Coloring

==  修改Editor中显示字体  ==
windows-> preferences-> appearence -> Colors and Fonts -> c/c++ -> Editor:  Edit...


==  Shortcut ==
*   Bind Keys:  Window -> Preferences -> General -> Keys
    *   Command：命令的名称
    *   Binding：命令绑定的快捷键
    *   When：   快捷键执行命令的条件
    *   Category：命令的类型
*   Useful Keys
    {{{
        Ctrl+1              快速修复(最经典的快捷键)
        Ctrl+D              删除当前行
        Ctrl+Q              定位到最后编辑的地方
        Ctrl+L              定位在某行 (对于程序超过100的人就有福音了)
        Ctrl+M              最大化当前的Edit或View (再按则反之)
        Ctrl+/              注释当前行,再按则取消注释
        Ctrl+O              快速显示 OutLine, 比如一个类，列出其方法和成员变量
        Ctrl+T              快速显示当前类的继承结构
        Ctrl+W              关闭当前Editer
        Ctrl+K              参照选中的Word快速定位到下一个
        Ctrl+E              快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示)
        Ctrl+J              正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在stutes line中显示没有找到了,查一个单词时,特别实用,这
        个功能Idea两年前就有了)
        CTrl+左键 or F3     跳到光标所在标识符的定义代码，用于查看变量、方法、类的定义
        Ctrl+Shift+G        在工作空间中查找引用了光标所在标识符的位置（查找所有引用）
        Ctrl+Shift+L        显示快捷键列表
        
        Debug 
            作用域 功能 快捷键 
            全局 单步返回 F7 
            全局 单步跳过 F6 
            全局 单步跳入 F5 
            全局 单步跳入选择 Ctrl+F5 
            全局 调试上次启动 F11 
            全局 继续 F8 
            全局 使用过滤器单步执行 Shift+F5 
            全局 添加/去除断点 Ctrl+Shift+B 
            全局 显示 Ctrl+D 
            全局 运行上次启动 Ctrl+F11 
            全局 运行至行 Ctrl+R 
            全局 执行 Ctrl+U
    }}}
