%toc

==  进程地址空间分布 ==
*   32位系统中， 内存空间拥有4GB的寻址能力， 其中1GB空间分配给内核， 3GB作为用户空间
{{{
    Kernel Space            0xffffffff

    stack                   0xc0000000                  栈顶

    unused

    dynamic libraries       0x40000000                  在2.6之后内核， 动态库加载地址变成靠近栈的位置0xbfxxxxxx处，
                                                        这样堆的可用空间变大了!!!   在/proc/xxx/maps中查看
    unused

    heap                    

    read/write sections(.data .bss)
    readonly sections(.init .rodata)    0x08048000      程序映像加载地址

    reserved                0
}}}
*   如果可执行文件依赖其他共享库， 系统在0x40000000开始的地址分配相应的空间， 并将共享库载入到该空间

=== 栈  ===
*   调用惯例
    *   函数参数的传递顺序和方式
    *   栈的维护方式
    *   名字修饰策略        不同的调用惯例有不同的名字修饰策略
*   C语言中存在多个调用惯例， 默认的是cdecl
{{{
    调用惯例    参数传递        出栈方                          名字修饰
    cdecl       函数调用方      从右至左顺序压栈                下划线+函数名
    stdcall     函数本身        从右至左顺序压栈                下划线+函数名+参数的字节数
    fastcall    函数本身        头两个放入寄存器， 其它压栈     @函数名+@+参数字节数
    pascal      函数本身        从左至右顺序压栈                较为复杂
}}}
*   函数栈布局
{{{
    int _cdecl foo(int n, int m)

                m                                      
    ebp+12      
                n                       在调用函数中执行， 先压栈参数， 然后将返回地址压栈， 由call完成                       
    ebp+8
                返回地址
    ebp+4
    --------------------------------
                old ebp
    ebp         

                保存寄存器和局部变量    在被调用函数中执行， 函数入口处， 先将ebp压栈， 再将寄存器压栈， 最后分配栈局部变量
                                        函数在退出前， 执行相反的动作， 弹出寄存器， 再弹出ebp， 由ret完成
    esp
    
    ================================
    ebp     指向old ebp
    ebp+4   指向n
}}}

=== 堆  ===
*   malloc  程序向操作系统申请一块适当大小的堆空间， 然后由程序自己管理， 实际是由运行库来管理的
*   Linux下堆分配方式有两种， 即两个系统调用：  brk()和mmap()
    *   brk     设置进程数据段的结束地址
    *   mmap    与Windows下的VirtualAlloc相似， 向操作系统申请一段虚拟地址空间。 当不将地址空间映射到某个文件时， 可当作堆空间(匿名空间)
    *   glibc中malloc的实现：   小于128KB的请求， 在现有堆空间按堆分配算法分配一块空间返回；大于128KB， 使用mmap分配一块匿名空间
*   Windows堆管理器：   HeapCreate、HeapAlloc、HeapFree、HeapDesctroy
    *   MSVC的malloc函数调用了HeapAlloc这个API， 将堆管理的过程交给操作系统， 在入口函数中， 调用了HeapCreate。
    *   NTDLL.DLL   这个dll是windows OS用户层最底层的DLL， 它负责Windows子系统dll与Windows内核之间的接口， 用户程序、运行时库和子系统的堆分配使用它
    *   Ntoskrnl.exe    它负责Windows内核中的堆空间分配， 内核、内核组件、驱动程序使用堆时用它提供的功能， 接口以RtlHeap开头
*   堆分配算法
    *   空闲链表
    *   位图
    *   对象池


==  系统调用 ==
*   linux使用0x80作为系统调用的中断向量号， 但是效率不高， 在2.5版之后使用新的机制， Intel奔腾处理器之后提供专用系统调用指令：sysenter和sysexit
    *   linux-gate.so.1用于支持新型系统调用的"虚拟"共享库， 使用ldd /bin/ls看到它不对应任何文件， 它总被加载在0xffffe000的位置上 
*   Windows使用0x2E作为系统调用入口
==  C运行库 ==
*   GNU:    
{{{
    glibc是GNU发布的libc库，即c运行库。glibc是linux系统中最底层的api，几乎其它任何运行库都会依赖于glibc。
    glibc除了封装linux操作系统所提供的系统服务外，它本身也提供了许多其它一些必要功能服务的实现。
}}}

*   Windows:    
{{{
    VC++完美的支持C和C++标准，因此也就按照C和C++的标准定义的函数原型实现了上述运行时库。
　　对于C运行时库CRT，VC6.0、VC2005、VC2008和VC2010均提供了DLL版本和LIB版本。
    
    C:
    上述各个编译器提供的LIB版的CRT库，均实现在libcmt.lib。对应的调试版名称为libcmtd.lib。

　　而DLL版本名称根据编译器不同而不同，我们可以从名称上加以分辨。
　　VC6.使用的CRT库的DLL版本在MSVCRT.DLL中实现， 对应调试版本为MSVCRTD.LIB。
　　VC2005使用的CRT库的DLL版本在MSVCR80.DLL中实现，对应调试版本为MSVCR80.DLL。
　　VC2008使用的CRT库的DLL版本在MSVCR90.DLL中实现，对应调试版本为MSVCR90D.DLL。
　　VC2010使用的CRT库的DLL版本在MSVCR100.DLL中实现，对应调试版本为MSVCR100D.DLL。

    C++:
　　C++标准兼容C标准，但VC各版本将C++编译器使用的C标准库与C编译器使用的C运行库一起实现，它们使用相同的运行库。

　　对于C++标准库中的IO流和STL，VC6.0、VC2005、VC2008和VC2010也提供了DLL版本和LIB版本。
　　LIB版均实现在libcpmt.lib中，对应的调试版本为libcpmtd.lib。

　　不同版本的编译器实现的DLL也不相同。
　　VC6.使用的C++类库的 DLL版本在MSVCP60.DLL中实现， 对应调试版本为MSVCP60D.LIB。
　　VC2005使用的C++类库的DLL版本在MSVCP80.DLL中实现，对应调试版本为MSVCP80.DLL。
　　VC2008使用的C++类库的 DLL版本在MSVCP90.DLL中实现，对应调试版本为MSVCP90D.DLL。
　　VC2010使用的C++类库的DLL版本在MSVCP100.DLL中实现，对应调试版本为MSVCP100D.DLL。


    配置选项来设置程序使用的C和C++运行时库的类型:
    MT选项：链接LIB版的C和C++运行库。在链接时就会在将C和C++运行时库集成到程序中成为程序中的代码，程序体积会变大。
　　MTd选项：LIB的调试版。
　　MD选项：使用DLL版的C和C++运行库，这样在程序运行时会动态的加载对应的DLL，程序体积会减小，缺点是在系统没有对应DLL时程序无法运行。
　　MDd选项：表示使用DLL的调试版。
}}}
