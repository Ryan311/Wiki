%toc
= Security =
== SSH ==
*   1995 芬兰学者 Tatu Ylonen设计
*   SSH是一种网络协议，用于计算机之间的加密登录, 有多种实现，如OpenSSH
*   连接
    *   ssh user@host   ==> 登录远程主机
    *   ssh -p 2222 user@host   ==> 登录端口号为2222的主机
*   登录
    *   口令登录: 每次登录需输入密码, 需要保存远程主机的公钥
    *   公钥登录: 用户将自己的公钥依存在远程主机上，登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来，远程主机用事先依存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再需要密码
    *   使用第二种方法，用户必须提供自己的公钥，由ssh-keygen生成, 结束后会在$HOME/.ssh/目录下，生成两个文件: id_rsa.pub和id_rsa，分别为公钥和私钥
    *   authorizied_keys文件:   远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/autorized_keys文件中.
*   Reference
    *   http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html
    *   http://www.youdzone.com/signature.html

== HTTPS ==
*   超文本传输安全协议（缩写：HTTPS，英语：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合
*   网景在1994年创建了HTTPS，并应用在网景导航者浏览器中。 最初，HTTPS是与SSL一起使用的；在SSL逐渐演变到TLS时，最新的HTTPS也由在2000年五月公布的RFC 2818正式确定下来。
*   http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。

=== SSL ===
*   SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全(Transport Layer Security，TLS)是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。
*   SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。SSL协议可分为两层：
    *   SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。
    *   SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。

== 密码学 ==
*   加密方法可以分为两大类。一类是单钥加密(private key cryptography), 也叫对称加密; 还有一类叫又钥加密(publickey cryptography), 也叫非对称加密。前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是两套密码。 莫尔斯电码可以看作是一种单钥加密方法。
*    在单钥加密的情况下，密钥只有一把，所以密钥的保存变得很重要。一旦密钥泄漏，密码也就被破解。在双钥加密的情况下，密钥有两把，一把是公开的公钥，还有一把是不公开的私钥。双钥加密的原理如下：
    *   公钥和私钥是一一对应的关系，有一把公钥就必然有一把与之对应的、独一无二的私钥，反之亦成立。
    *   所有的（公钥, 私钥）对都是不同的。
    *   用公钥可以解开私钥加密的信息，反之亦成立。
    *   同时生成公钥和私钥应该相对比较容易，但是从公钥推算出私钥，应该是很困难或者是不可能的。
*   目前，通用的单钥加密算法为DES（Data Encryption Standard），通用的双钥加密算法为RSA（ Rivest-Shamir-Adleman），都产生于上个世纪70年代。
*   在双钥体系中，公钥用来加密信息，私钥用来数字签名。
*   因为任何人都可以生成自己的（公钥，私钥）对，所以为了防止有人散布伪造的公钥骗取信任，就需要一个可靠的第三方机构来生成经过认证的（公钥，私钥）对。目前，世界上最主要的数字服务认证商是位于美国加州的Verisign公司，它的主要业务就是分发RSA数字证书。

=== 数字签名 ===
*   数据签名：使用公钥算法，用来验证数据来源。由发送方对消息进行散列创建信息摘要，然后使用私钥对信息摘要进行加密以创建个人签名，接收方使用公钥对数据进行解密以恢复消息摘要，然后使用相同的哈希算法来散列消息，如果接收方计算出的信息摘要与从发送方接收到的信息摘要相同，则可以确定该消息来自发送方，并且数据未被修改过。
*   http://www.cnblogs.com/1-2-3/archive/2007/09/17/colloquialism-digital-certificate-part1.html
*   非对称加密算法的一个重大缺点是加密速度慢，所在在实际使用非对称加密的时候，往往不直接对文件进行加密，而是使用摘要算法与非对称算法相结合(适用于数字签名)

=== [[http://www.cnblogs.com/1-2-3/archive/2007/09/19/colloquialism-digital-certificate-part2.html|数字信封]] ===
*   用对称加密和非对称加密相结合(适用于加密传输文件)的办法来解决或者说绕过非对称加密算法速度慢的问题。  
*   将传输内容进行对称加密，将对称加密用到的密钥用非对称加密的公钥加密，将这两部分一起传输

=== 数字证书 ===
*   数字证书是由一个权威机构发行的，至少包含一个公开密钥、证书持有人（或单位）的名称以及证书授权中心对这些信息的数字签名的文件。一般情况下证书中还包括密钥的有效时间，发证机关(证书授权中心)的名称，该证书的序列号等信息，证书的格式遵循ITUT X.509国际标准。

=== USB Key ===
*   USB Key是一种USB设备，外形就跟U盘一样，只不过无法用它来存取文件。证书发行单位会使用特殊的设备将你的数字证书、私钥和电子签章程序所要使用的印章图片烧录到USB Key中。你无法使用资源管理器或木马程序取得USB Key中的私钥，当需要用私钥进行签名时，直接通过USB Key的驱动程序提供的API将明文传输到USB Key中，由USB Key中的加密芯片对明文进行加密，加密结果会以API函数的返回值的形式返回，这样就可以有效解决私钥被坏蛋复制的问题了。还有就是USB Key本身还有一个简短的使用密码，每次加密前使用者必须输入正确的使用密码方能使用，这样即使USB Key不慎丢失，也不用担心了。

=== 摘要 ===
*   摘要算法又叫Hash算法或散列算法，是一种将任意长度的输入浓缩成固定长度的字符串的算法，这个过程是不可逆的

=== Tools in Ubuntu ===
*   seahorse
    *   sudo apt-get install seahorse-nautilus
    *   重新登录后就可以在文件浏览器中点右键看到扩展
*   openssl
    *   是一个基于密码学的安全开发包
