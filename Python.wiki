%toc
== Python ==
*   Author: *Guido van Rossum*      1991
*   编程范型： 命令式编程、多范型、面向对象、函数式编程、面向切面编程
*   型态系统： [[强类型]]、[[动态类型]]、[[duck typing]]
*   [[Python Coding Style]]
*   [[Basic]]
*   [[Data Types]]
*   [[Library]]
*   [[Useful Library]]
*   [[Distribute and Install package]]
*   [[http://www.ibm.com/developerworks/cn/linux/l-cn-pythondebugger/|Debug]]
*   [[PythonVirtualEnviroment]]
*   Books & Docs
    *   [[Python Cook Book]]
    *   [[http://www.tummy.com/presentations/vimpython-20070225/|python&vim]]
    *   [[Python Core Programming]]
*   [[https://github.com/philipbjorge/EditREPL|EditREPL use vim in python interacive shell]]
*   [[http://www.cnblogs.com/moinmoin/archive/2011/03/10/lsit-comprehensions-generators.html|python列表解析和生成表达式]]
*   [[Iterator and Generator]] [[http://www.dabeaz.com/generators-uk/|Generator Tricks]] [[file://F:/Wiki/wiki2_html/GeneratorsUK.pdf|Generator!!!]]
*   *Linux System Mining with Python* [[http://amitsaha.github.io/site/notes/articles/python_linux/article.html|English]] [[http://www.linuxeden.com/html/news/20130802/141990.html|Chinese]]
*   [[Parse cmd line argument]]
*   [[遍历文件夹下的文件]]
*   [[Decorator]]
*   [[Closure]]
*   [[Python Tricky]]
*   [[Python Challenge]]
*   Python性能分析
*   [[http://legacy.python.org/dev/peps/|PEP]](Python增强建议书)
    *   PEP是Python Enhancement Proposals的缩写
    *   一个PEP是一份为Python社区提供各种增强功能的技术规格
        *   跟踪Python中的新特性
        *   说明Python中的某一个设计问题
        *   关于Python的提案，但不针对Python语言本身
    *   PEP 0       //index of PEPs
    *   PEP 1       //PEP Purpose and Guidelines
*   python自定义库文件路径
    {{{
    Python 运行环境在查找库文件时是对 sys.path 列表进行遍历，如果我们想在运行环境中注册新的类库，主要有以下三种方法：
    1.  在sys.path列表中添加新的路径。
    2.  设置PYTHONPATH环境变量。
    3.  将库文件复制到sys.path列表中的目录里（如site-packages目录）。
    4.  用 .pth 文件来实现。Python 在遍历已知的库文件目录过程中，如果见到一个 .pth 文件，就会将文件中所记录的路径加入到 sys.path 设置中，这样 .pth 文件说指明的库也就可以被 Python 运行环境找到。
        操作：
        在Python/Lib/site-package目录下创建一个MyModule.pth文件，其中内容为自定义的模块所在的路径。
    }}}

== [[http://www.oschina.net/translate/python-performance-analysis?cmp|Analyzing performance]] ==
=== time ===
*   $ time python yourprogram.py
=== execute within a timing context manager ===
{{{class = "brush: python"
#timer.py

import time
class Timer(object):
    def __init__(self, verbose=False):
        self.verbose = verbose

    def __enter__(self):
        self.start = time.time()
        return self

    def __exit__(self, *args):
        self.end = time.time()
        self.secs = self.end - self.start
        self.msecs = self.secs * 1000  # millisecs
        if self.verbose:
            print 'elapsed time: %f ms' % self.msecs

# example
from timer import Timer
from redis import Redis
rdb = Redis()

with Timer() as t:
    rdb.lpush("foo", "bar")
print "=> elasped lpush: %s s" % t.secs

with Timer as t:
    rdb.lpop("foo")
print "=> elasped lpop: %s s" % t.secs
}}}
=== line-by-line monitor ===
*   $ sudo pip install line_profiler
*   the executable script is "kernprof.py"
*   yourprogram.py must add decorator *@profile* for the func you want to measure the execute time
*   $ kernprof.py -l -v yourprogram.py
=== how much memory does it use ===
*   $ sudo pip install -U memory_profiler
*   $ sudo install psutil
*   add *@profile* to your func
*   $ python -m memory_profiler yourprogram.py
=== memory leak ===
*   $ sudo pip install [[http://mg.pov.lt/objgraph/|objgraph]]
*   $ sudo pip install xdot


== Tools ==
*   Show image in terminal when call Image.show() within PIL
    *   sudo apt-get install imagemagick
*   [[Py2exe]]
*   [[easy_install & pip]]
*   [[https://github.com/philipbjorge/EditREPL|EditREPL use vim in python interacive shell]]
*   [[PythonVirtualEnviroment]]
*   [[http://www.ibm.com/developerworks/cn/linux/l-cn-pythondebugger/|Debug]]
*   [[http://www.lfd.uci.edu/~gohlke/pythonlibs/|Unofficial Windows Binaries for Python Extension Packages]]
*   [[http://www.pythonforbeginners.com/basics/ipython-a-short-introduction/|IPython]] ===
    *   Tab completion              " very useful
    *   Using Python debugger
    *   Profiles
    *   QT-based
*   [[http://yangzetian.github.io/2013/02/08/ipython-notebook-interactive-computing-new-era/|IPython-notebook]]
{{{
IPython Notebook 是一种新兴的交互式数据分析与记录工具，它定义了一种全新的计算文件格式，其中包含了代码，
代码说明以及每一步的计算输出(数值或图片等)，也就是说这一个文件完整记录了计算过程中的所有相关信息。此外，
该文件还可以嵌入网络视频，图片， 公式等众多副文本格式，实为交互计算，记录思维，传播思想的好帮手。
}}}
    *   > sudo ipython notebook
    *   > sudo ipython notebook --pylab
    *   > sudo ipython notebook --pylab inline
    *   As ipython notebook kernel must run as root while chrome can't run as root
        *   modify /usr/bin/google-chrome, add *--user-data-dir* in the end of last line
*   [[http://www.lfd.uci.edu/~gohlke/pythonlibs/|Unofficial Windows Binaries for Python Extension Packages]]

== Books & Docs ==
*   [[Python Cook Book]]
*   [[http://www.tummy.com/presentations/vimpython-20070225/|python&vim]]
*   [[Python Core Programming]]
*   [[http://woodpecker.org.cn/diveintopython3/special-method-names.html|特殊方法 深入Python3]] [[http://www.cnblogs.com/vamei/archive/2012/11/19/2772441.html|Examples]]
*   [[http://effbot.org/zone/python-for-statement.htm|For Statement]]
    *  original     __getitem___  
    *  new          ___iter___ and ___next___
*   [[http://effbot.org/zone/python-with-statement.htm|With Statement]]
    *   ___enter___ and ___exit___ 
*   [[http://effbot.org/zone/python-getattr.htm|getattr Function]]
    *   ___getattr___ 

=== Tools make live easier ===
*   [[WppFormat]]
*   [[SymStore]]
*   [[LogChange]]   
*   [[GetFileVersion]]
*   [[WppLogConvert]]    
*   [[DelCorruptSymFle]]

